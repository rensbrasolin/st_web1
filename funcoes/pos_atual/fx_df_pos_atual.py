# A ideia √© constituir o df_pos_atual aqui e s√≥ exibi-lo l√° na pagina

import streamlit as st

from funcoes.pos_atual.colunas.col_consolidadas.fx_col_consolidadas_inicio import criar_df_pos_atual_col_consolidadas_inicio
from funcoes.pos_atual.colunas.col_cotacao.fx_col_cotacao_tvb3 import criar_df_cotacao_tvb3
from funcoes.pos_atual.colunas.col_consolidadas.fx_col_consolidadas_rem import criar_df_pos_atual_col_consolidadas_rem
from funcoes.pos_atual.colunas.col_consolidadas.fx_col_consolidadas_res_vendas import criar_df_pos_atual_col_consolidadas_res_vendas
from funcoes.pos_atual.colunas.col_calculadas.fx_col_calculadas import criar_col_calculadas
from funcoes.pos_atual.colunas.col_consolidadas.fx_col_consolidadas_tir import criar_df_pos_atual_col_consolidadas_tir



# --------------------------------------------------------------------------------------- Fx inclui df_col no principal
# OBRIGA√ìRIO QUE ELA FIQUE ACIMA DA FX criar_df_pos_atual, POIS ELA √â USADA L√Å
# √â obrigat√≥rio que a coluna 'Ativo' dos dfs_col n√£o tenham o nome de 'Ativo'. Se n√£o vai dropar a col do df_principal tbm.
def incluir_df_col(df_principal, df_col, col_comum_df_col, col_incluir_df_col):

    df_principal = df_principal.merge(
        df_col[[col_comum_df_col, col_incluir_df_col]],
        left_on='Ativo',
        right_on=col_comum_df_col,
        how='left'
    ).drop(columns=col_comum_df_col)

    # Caso tenha valor vazio, que seja 0
    df_principal[col_incluir_df_col] = df_principal[col_incluir_df_col].fillna(0)

    return df_principal



# -------------------------------------------------------------------------------------------------------- Fx principal
def criar_df_pos_atual(df_mov_financeiras):

    # Start - Colunas: 'Ativo', 'Tipo de Ativo', 'Qtd Acumulada' (Qtd), 'Custo M√©dio'
    df_pos_atual = criar_df_pos_atual_col_consolidadas_inicio(df_mov_financeiras)

    # Cria e inclui cota√ß√£o
    df_cotacao_tvb3 = criar_df_cotacao_tvb3(df_mov_financeiras)
    df_pos_atual = incluir_df_col(df_pos_atual, df_cotacao_tvb3, 'Ticker', 'Pre√ßo')

    # Cria e inclui remunera√ß√µes
    df_pos_atual_col_consolidadas_rem =  criar_df_pos_atual_col_consolidadas_rem(df_mov_financeiras, df_pos_atual)
    df_pos_atual = incluir_df_col(
        df_pos_atual, df_pos_atual_col_consolidadas_rem,
        'Ticker', 'Remunera√ß√µes $')

    # Cria e inclui resultado de vendas
    df_pos_atual_col_consolidadas_res_vendas = criar_df_pos_atual_col_consolidadas_res_vendas(df_mov_financeiras)
    df_pos_atual = incluir_df_col(df_pos_atual, df_pos_atual_col_consolidadas_res_vendas,
                                  'Ticker','Resultado de Vendas $')


    # Cria no pr√≥prio df_pos_atual colunas calculadas com medidas j√° existentes nele.
    # N√£o se est√° criando um df_col, por isso n√£o precisa ser inserido como foram as colunas anteriores
    df_pos_atual = criar_col_calculadas(df_pos_atual)


    # Cria e inclui TIR. Tem que ser inserida por √∫ltimo pois usa a col calculada 'Patrim√¥nio Atual'
    df_pos_atual_col_consolidadas_tir = criar_df_pos_atual_col_consolidadas_tir(df_mov_financeiras, df_pos_atual)
    df_pos_atual = incluir_df_col(df_pos_atual, df_pos_atual_col_consolidadas_tir,
                                  'Ticker','TIR %')


    # Renomeando colunas:
    df_pos_atual.rename(columns={'Pre√ßo': 'Pre√ßo Atual'}, inplace=True)


    # Escolhendo n√£o apenas a ordem das colunas, mas quais ir√£o aparecer.
    ordem_colunas = [
        'Ativo',
        'Tipo',
        'Qtd',
        'Pre√ßo M√©dio',
        'Custo M√©dio',
        'Pre√ßo Atual',
        'Patrim√¥nio Atual',
        'Varia√ß√£o %',
        'Varia√ß√£o $',
        # 'Yield on Cost %',
        'Remunera√ß√µes $',
        'Resultado de Vendas $',
        # 'Performance %',
        'Performance $',
        'TIR %'
    ]

    df_pos_atual = df_pos_atual[ordem_colunas]



    return df_pos_atual


# ----------------------------------------------------------------------------------------------------------- Fx filtros


def criar_filtro_tipo_df_pos_atual(df_pos_atual):
    # Criar um "radio button" para filtrar por Tipo de Ativo
    tipo_ativo_opcoes = ["Todos"] + df_pos_atual["Tipo"].unique().tolist()
    tipo_ativo_selecionado = st.radio(
        "Selecione o Tipo de Ativo",
        options=tipo_ativo_opcoes,
        index=0,  # Valor padr√£o: "Todos"
    )

    # Atualizar as op√ß√µes de ativos com base na sele√ß√£o anterior, 'Tipo de Ativo'


    if tipo_ativo_selecionado == "Todos":
        # Se "Todos" for selecionado, incluir todos os ativos
        ativo_opcoes = ["Todos"] + df_pos_atual["Ativo"].unique().tolist()
    else:
        # Filtrar os ativos com base no Tipo de Ativo selecionado
        ativo_opcoes = ["Todos"] + df_pos_atual.loc[
            df_pos_atual["Tipo"] == tipo_ativo_selecionado, "Ativo"
        ].unique().tolist()
        ###
        # Aplicar filtro por Tipo de Ativo no df
    if tipo_ativo_selecionado != "Todos":
        df_pos_atual = df_pos_atual[
            df_pos_atual["Tipo"] == tipo_ativo_selecionado
            ]

    return df_pos_atual



# ----------------------------------------------------------------------------------------------------------- Fx totais
# Medidas ser√£o criadas na mesma ordem em que as colunas do df form criadas.
# Importante usar os titulos finais das colunas do df_pos_atual nesses c√°lculos. (olhar na lista acima)

def criar_medidas_df_pos_atual(df_pos_atual):

    # Estas medidas n√£o necessariamente precisam ser mostradas
    qtd_ativos_total_df_pos_atual = df_pos_atual['Qtd'].count() # Essa at√© faz sentido mostrar.
    qtd_tipos_total_df_pos_atual = df_pos_atual['Tipo'].nunique() # N√£o faz sentido, j√° que df pode ser filtrado.
    qtd_total_df_pos_atual = df_pos_atual['Qtd'].sum() # N√£o tenho certeza se esa medida √© necess√°ria.

    custo_medio_total_df_pos_atual = df_pos_atual['Custo M√©dio'].sum()

    remuneracoes_total_df_pos_atual = df_pos_atual['Remunera√ß√µes $'].sum()

    res_vendas_total_df_pos_atual = df_pos_atual['Resultado de Vendas $'].sum()

    patrimonio_atual_total_df_pos_atual = df_pos_atual['Patrim√¥nio Atual'].sum()

    variacao_percentual_total_df_pos_atual = (patrimonio_atual_total_df_pos_atual / custo_medio_total_df_pos_atual - 1) * 100

    variacao_absoluta_total_df_pos_atual = df_pos_atual['Varia√ß√£o $'].sum()

    # N√£o faz mais sentido. Deixar um pouco e depois excluir
    yieldoncost_total_df_pos_atual = remuneracoes_total_df_pos_atual / custo_medio_total_df_pos_atual * 100

    performance_absoluta_total_df_pos_atual = df_pos_atual['Performance $'].sum()

    # N√£o faz mais sentido. Deixar um pouco e depois excluir
    # No c√°lculo da coluna, essa medida ficar√° zerada se a posi√ß√£o for zerada. J√° que compara o desempenho com o 'Custo M√©dio', que estar√° zerado.
    # J√° aqui no total, n√£o, pois s√≥ utiliza valores absolutos. E sim, as posi√ß√µes zeradas ter√£o tbm a coluna 'Varia√ß√£o $' zeradas,
    # por√©m, nesse c√°lculo n√£o h√° problema, pois quando a posi√ß√£o √© zerada, o que era 'Varia√ß√£o $' vira 'Resultado com Vendas'. acho
    performance_percentual_total_df_pos_atual = ((remuneracoes_total_df_pos_atual + res_vendas_total_df_pos_atual + variacao_absoluta_total_df_pos_atual)
                                                 / custo_medio_total_df_pos_atual * 100)

    # tir_total_df_pos_atual = essa fx √© criada separada. L√° no fx_df_pos_atual.py


    return (qtd_ativos_total_df_pos_atual, qtd_tipos_total_df_pos_atual, qtd_total_df_pos_atual, custo_medio_total_df_pos_atual,
            remuneracoes_total_df_pos_atual, res_vendas_total_df_pos_atual,patrimonio_atual_total_df_pos_atual,
            variacao_percentual_total_df_pos_atual, variacao_absoluta_total_df_pos_atual, yieldoncost_total_df_pos_atual,
            performance_absoluta_total_df_pos_atual, performance_percentual_total_df_pos_atual)


# ------------------------ Exibindo indicadores totais
# Por enquanto est√° cabendo na p√°gina, mas uma carteira com 3 d√≠gitos j√° geraria abrevia√ß√£o do metric.
# Solu√ß√£o mais f√°cil: Fazer 3 linhas com 4 cada e/ou exibir emoji no t√≠tulo e n√£o no valor.
# Solu√ß√£o dif√≠cil: Fazer sem metric, talvrz criar uma fx quer cria metric manualmente com wrtite/title sei l√°.

def exibir_medidas_df_pos_atual(
            qtd_ativos_total_df_pos_atual, # Essa at√© faz sentido mostrar.
            qtd_tipos_total_df_pos_atual, # N√£o faz muito sentido, j√° que df pode ser filtrado.
            qtd_total_df_pos_atual,  # N√£o ser√° usada provavelmente

            custo_medio_total_df_pos_atual,
            remuneracoes_total_df_pos_atual,
            res_vendas_total_df_pos_atual,
            patrimonio_atual_total_df_pos_atual,
            variacao_percentual_total_df_pos_atual,
            variacao_absoluta_total_df_pos_atual,
            yield_total_df_pos_atual, # N√£o faz mais sentido. Deixar um pouco e depois excluir
            performance_absoluta_total_df_pos_atual,
            performance_percentual_total_df_pos_atual, # N√£o faz mais sentido. Deixar um pouco e depois excluir
            tir_total_df_pos_atual,
        ):

# Poderia at√© usar um for mas como cada caso √© um caso, vou deixar 'manual' mesmo.

    col1, col2, col3, col4, col5 = st.columns([0.53, 1, 1, 1, 1])

    with col1:
        with st.container(border=True):
            st.metric('üßæ Ativos', f' {qtd_ativos_total_df_pos_atual:,.0f}')

        with st.container(border=True):
            st.metric('üóÇÔ∏è Tipos de Ativos', f'{qtd_tipos_total_df_pos_atual:,.0f}')


    with col2:
        with st.container(border=True):
            st.metric('üí∞ Custo M√©dio', f'R$ {custo_medio_total_df_pos_atual:,.2f}'.replace(
                ",", "X").replace(".", ",").replace("X", "."),
                      help="""
                        - Soma do valor de todas as compras
                        - Quando h√° venda, subtrai-se o valor de 'Pre√ßo M√©dio * Qtd Vendida'
                        """
                      )

        with st.container(border=True):
            st.metric('üè¶ Patrim√¥nio Atual', f'R$ {patrimonio_atual_total_df_pos_atual:,.2f}'.replace(
                ",", "X").replace(".", ",").replace("X", "."),
                      help = "'Quantidade de Ativos * Cota√ß√£o Atual'"
                      )


    with col3:
        with st.container(border=True):
            st.metric('üìà Varia√ß√£o Percentual', f'{variacao_percentual_total_df_pos_atual:,.2f}%',
                      help='Diferen√ßa entre Cota√ß√£o Atual e Pre√ßo M√©dio'
                      )

        with st.container(border=True):
            st.metric('üìà Varia√ß√£o Absoluta', f' R$ {variacao_absoluta_total_df_pos_atual:,.2f}'.replace(
                ",", "X").replace(".", ",").replace("X", "."),
                      help='Diferen√ßa absoluta entre Patrim√¥nio Atual e Custo M√©dio'
                      )


    with col4:
        with st.container(border=True):
            st.metric('ü™ô Remunera√ß√µes', f'R$ {remuneracoes_total_df_pos_atual:,.2f}'.replace(
                ",", "X").replace(".", ",").replace("X", "."),
                      help="""
            Soma dos recebimentos de:
            - Dividendo
            - Juros Sobre Capital Pr√≥prio
            - Rendimento"""
                      )

        with st.container(border=True):
            st.metric('üíµ Resultado de Vendas', f'R$ {res_vendas_total_df_pos_atual:,.2f}'.replace(
                ",", "X").replace(".", ",").replace("X", "."),
                      help='Saldo dos resultados (lucro ou preju√≠zo) de todas as opera√ß√µes de vendas'
                      )


    with col5:
        with st.container(border=True):
            st.metric('üöÄ Performance Absoluta', f'R$ {performance_absoluta_total_df_pos_atual:,.2f}'.replace(
                ",", "X").replace(".", ",").replace("X", "."),
                      help='''
                           Saldo dos resultados de:
                           - Varia√ß√£o Absoluta
                           - Remunera√ß√µes
                           - Resultado de Vendas
                           '''
                      )

        with st.container(border=True):
            st.metric('üíπ Taxa Interna de Retorno', f'{tir_total_df_pos_atual:,.2f}% a.a.',
                      help='''
                 Calcula a taxa de retorno anual, considerando todas as movimenta√ß√µes do fluxo de caixa da carteira:
                 - Compras [ - ]
                 - Vendas [ + ]
                 - Remunera√ß√µes [ + ]
                 '''
                      )  # üßÆüìâ














    # col1b, col2b, col3b, col4b = st.columns([0.8, 1, 1, 1])
    #
    # with col1b:
    #     with st.container(border=True):
    #         st.metric('Ativos', f'üßæ {qtd_ativos_total_df_pos_atual:,.0f}')
    #
    #     with st.container(border=True):
    #         st.metric('Varia√ß√£o Percentual', f'üìà {variacao_percentual_total_df_pos_atual:,.2f}%')
    #
    #     # with st.container(border=True):
    #     #     st.metric('Performance Percentual', f'üöÄ {performance_percentual_total_df_pos_atual:,.2f}%')
    #
    # with col2b:
    #     with st.container(border=True):
    #         st.metric('Tipos de Ativos', f'üóÇÔ∏è {qtd_tipos_total_df_pos_atual:,.0f}')
    #
    #     with st.container(border=True):
    #         st.metric('Varia√ß√£o Absoluta', f'üìà R$ {variacao_absoluta_total_df_pos_atual:,.2f}'.replace(
    #             ",", "X").replace(".", ",").replace("X", "."))
    #
    #     with st.container(border=True):
    #         st.metric('Performance Absoluta', f'üöÄ R$ {performance_absoluta_total_df_pos_atual:,.2f}'.replace(
    #             ",", "X").replace(".", ",").replace("X", "."))
    #
    # with col3b:
    #     with st.container(border=True):
    #         st.metric('Custo M√©dio', f'üí∞ R$ {custo_medio_total_df_pos_atual:,.2f}'.replace(
    #             ",", "X").replace(".", ",").replace("X", "."),
    #                   help="""
    #                     - Soma de todas as compras.
    #                     - Quando h√° venda, se subtrai o valor de 'Pre√ßo M√©dio * Qtd Vendida'.
    #                     """
    #                   )
    #
    #     # with st.container(border=True):
    #     #     st.metric('Yield on Cost', f'ü™ô {yield_total_df_pos_atual:,.2f}%')
    #
    #     with st.container(border=True):
    #         st.metric('Resultado de Vendas', f'üíµ R$ {res_vendas_total_df_pos_atual:,.2f}'.replace(
    #             ",", "X").replace(".", ",").replace("X", "."))
    #
    # with col4b:
    #     with st.container(border=True):
    #         st.metric('Patrim√¥nio Atual', f'üè¶ R$ {patrimonio_atual_total_df_pos_atual:,.2f}'.replace(
    #             ",", "X").replace(".", ",").replace("X", "."))
    #
    #     with st.container(border=True):
    #         st.metric('Remunera√ß√µes', f'ü™ô R$ {remuneracoes_total_df_pos_atual:,.2f}'.replace(
    #             ",", "X").replace(".", ",").replace("X", "."))
    #
    #     with st.container(border=True):
    #         st.metric('Taxa Interna de Retorno', f'üíπ {tir_total_df_pos_atual:,.2f}%')  # üßÆüìâ
